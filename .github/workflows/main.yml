# Называем workflow
name: pw test
# Когда запускать тесты
on:  
  push:
    branches: [main, graduation_project]
  pull_request:
    branches: [main, graduation_project]
  workflow_dispatch:
      inputs:
      ALLURE_JOB_RUN_ID:
        description: ALLURE_JOB_RUN_ID service parameter. Leave blank.
      ALLURE_USERNAME:
        description: ALLURE_USERNAME service parameter. Leave blank.

env:
  ALLURE_TOKEN: ${{ secrets.ALLURE_TOKEN }}
  ALLURE_JOB_RUN_ID: ${{ github.event.inputs.ALLURE_JOB_RUN_ID }}
  ALLURE_ENDPOINT: https://allure.autotests.cloud/
  ALLURE_PROJECT_ID: 4738
  ALLURE_RESULTS: ./allure-results

# Сама джобы
jobs:
  #название джобы
  e2eTest:
    timeout-minutes: 60
    # задаем окружение
    runs-on: ubuntu-latest
    steps:
    # делаем чекаут
      - uses: actions/checkout@v4
    # устанавливаем ноду
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
    # установим зависимоcти / npm ci
      - run: npm i
    # устанавливаем PW
      - name: Install PW
        run: npx playwright install --with-deps
    # устанавливаем testOps CLI
      - name: Setup Allure TestOps CLI
        uses: allure-framework/setup-allurectl@v1
        with:
          allure-endpoint: ${{ secrets.ALLURE_ENDPOINT }}
          allure-token: ${{ secrets.ALLURE_TOKEN }}
          allure-project-id: ${{ secrets.ALLURE_PROJECT_ID }}
    # запускаем вотчер allurectl и собираем результаты в allure-results
      - name: Run Playwright tests and upload to Allure TestOps
        run: |
          allurectl watch -- npx playwright test
        env:
          # Путь к папке с результатами Allure
          ALLURE_RESULTS: './allure-results'
    # сохраняем отчет pw
      - uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: test-results
          path: test-results
          retention-days: 20
    # сохраняем отчет allure
      - uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results
          retention-days: 20
    # забираем результаты предыдущего запуска отчета allure
      - uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
    # Формируем из allure-results отчет allure-report
      - uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20
    
    # Деплоим отчет
      - name: Deploy report
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history  # default: gh-pages
 
    # Установка Java для запуска JAR файлов
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

    # Отправить уведомление в Telegram с помощью Allure-Notifications
      - name: Send Telegram notification
        run: |
          export TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          export TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          sudo dpkg -i allure_2.29.0-1_all.deb
          allure generate allure-results --clean   
          java -DconfigFile=notifications/telegram.json -jar notifications/allure-notifications-4.9.0.jar
